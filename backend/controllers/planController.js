const Plan = require('../models/Plan');
const User = require('../models/User');
const mongoose = require('mongoose');

exports.getPlans = async (req, res) => {
  try {
    const plans = await Plan.find().sort({ createdAt: -1 }); 
    res.status(200).json(plans);
  } catch (err) {
    res.status(500).json({ message: 'L·ªói server khi l·∫•y danh s√°ch g√≥i', error: err.message });
  }
};

// L·∫•y chi ti·∫øt g√≥i tin theo ID
exports.getPlanById = async (req, res) => {
  try {
    const { id } = req.params;

    // Ki·ªÉm tra ID h·ª£p l·ªá
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ message: 'ID kh√¥ng h·ª£p l·ªá' });
    }

    // T√¨m g√≥i tin
    const plan = await Plan.findById(id);

    if (!plan) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y g√≥i tin' });
    }

    res.status(200).json({ message: 'L·∫•y g√≥i th√†nh c√¥ng', data: plan });
  } catch (err) {
    console.error('L·ªói khi l·∫•y g√≥i theo ID:', err);
    res.status(500).json({ message: 'L·ªói server khi l·∫•y g√≥i theo ID', error: err.message });
  }
};

exports.createPlan = async (req, res) => {
  try {
    const plan = await Plan.create(req.body); 
    res.status(201).json({ message: 'T·∫°o g√≥i th√†nh c√¥ng', data: plan });
  } catch (err) {
    res.status(400).json({ message: 'T·∫°o g√≥i th·∫•t b·∫°i', error: err.message });
  }
};

exports.updatePlan = async (req, res) => {
  try {
    const updated = await Plan.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!updated) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y g√≥i c·∫ßn c·∫≠p nh·∫≠t' });
    }
    res.status(200).json({ message: 'C·∫≠p nh·∫≠t th√†nh c√¥ng', data: updated });
  } catch (err) {
    res.status(400).json({ message: 'C·∫≠p nh·∫≠t th·∫•t b·∫°i', error: err.message });
  }
};

exports.deletePlan = async (req, res) => {
  try {
    const deleted = await Plan.findByIdAndDelete(req.params.id);
    if (!deleted) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y g√≥i ƒë·ªÉ x√≥a' });
    }
    res.status(200).json({ message: 'ƒê√£ x√≥a th√†nh c√¥ng' });
  } catch (err) {
    res.status(500).json({ message: 'X√≥a th·∫•t b·∫°i', error: err.message });
  }
};

// L∆∞u g√≥i tin ƒëƒÉng k√Ω c·ªßa ng∆∞·ªùi d√πng
exports.SavePlan = async (req, res) => {
  try {
    const { planId, userId } = req.body;

    console.log("üì• Nh·∫≠n d·ªØ li·ªáu t·ª´ client:", req.body);

    // Ki·ªÉm tra ID h·ª£p l·ªá
    if (
      !userId || !planId ||
      !mongoose.Types.ObjectId.isValid(userId) ||
      !mongoose.Types.ObjectId.isValid(planId)
    ) {
      return res.status(400).json({ thongBao: 'ID ng∆∞·ªùi d√πng ho·∫∑c g√≥i kh√¥ng h·ª£p l·ªá' });
    }

    // L·∫•y th√¥ng tin g√≥i
    const goi = await Plan.findById(planId);
    if (!goi) {
      return res.status(404).json({ thongBao: 'Kh√¥ng t√¨m th·∫•y g√≥i' });
    }

    // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
    const nguoiDung = await User.findById(userId);
    if (!nguoiDung) {
      return res.status(404).json({ thongBao: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });
    }

    // T√¨m g√≥i ƒë√£ t·ªìn t·∫°i trong vip
    const goiVipTonTai = nguoiDung.vip.find(v => v.plan && v.plan.toString() === planId);

    if (goiVipTonTai) {
      // C·ªông d·ªìn s·ªë l∆∞·ª£ng b√†i
      goiVipTonTai.remainingPosts.gold += goi.vipGold || 0;
      goiVipTonTai.remainingPosts.silver += goi.vipSilver || 0;
      goiVipTonTai.remainingPosts.regular += goi.regularPosts || 0;
      goiVipTonTai.remainingPosts.push += goi.pushPosts || 0;

      // C·∫≠p nh·∫≠t th·ªùi h·∫°n
      const currentExpire = new Date(goiVipTonTai.expireDate || Date.now());
      goiVipTonTai.expireDate = new Date(
        currentExpire.setMonth(currentExpire.getMonth() + (goi.duration || 1))
      );

      // N·∫øu l√† g√≥i c√≥ VIP cao h∆°n, c·∫≠p nh·∫≠t l·∫°i
      if (goi.vipGold > 0) {
        goiVipTonTai.plan = new mongoose.Types.ObjectId(planId);
      }
    } else {
      // T·∫°o m·ªõi g√≥i VIP
      const now = new Date();
      const expire = new Date(now);
      expire.setMonth(expire.getMonth() + (goi.duration || 1));

      // ƒê·∫£m b·∫£o plan l√† ObjectId h·ª£p l·ªá
      const goiVipMoi = {
        plan: new mongoose.Types.ObjectId(planId),
        remainingPosts: {
          gold: goi.vipGold || 0,
          silver: goi.vipSilver || 0,
          regular: goi.regularPosts || 0,
          push: goi.pushPosts || 0
        },
        startDate: now,
        expireDate: expire
      };

      // ƒê·∫©y v√†o m·∫£ng vip
      nguoiDung.vip.push(goiVipMoi);
    }

    // L∆∞u ng∆∞·ªùi d√πng
    await nguoiDung.save();

    return res.status(200).json({
      thongBao: 'C·∫≠p nh·∫≠t g√≥i th√†nh c√¥ng',
      duLieu: nguoiDung.vip
    });

  } catch (loi) {
    console.error('‚ùå L·ªói trong SavePlan:', loi);
    return res.status(500).json({
      thongBao: 'L·ªói server khi c·∫≠p nh·∫≠t g√≥i',
      loi: loi.message
    });
  }
};
